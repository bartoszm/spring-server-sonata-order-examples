/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ErrorRepresentation;
import org.threeten.bp.OffsetDateTime;
import io.swagger.model.ProductOrder;
import io.swagger.model.ProductOrderCreate;
import io.swagger.model.ProductOrderSummary;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@Api(value = "productOrder", description = "the productOrder API")
public interface ProductOrderApi {

    @ApiOperation(value = "Create a product order", nickname = "productOrderCreate", notes = "This operation is used to create an order. Depending on the order activity, one can \"INSTALL\", \"CHANGE\", or \"DISCONNECT\" an associated product.", response = ProductOrder.class, tags={ "ProductOrder", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = ProductOrder.class),
        @ApiResponse(code = 400, message = "Bad Request  List of supported error codes: - 20: Invalid URL parameter value - 21: Missing body - 22: Invalid body - 23: Missing body field - 24: Invalid body field - 25: Missing header - 26: Invalid header value - 27: Missing query-string parameter - 28: Invalid query-string parameter value", response = ErrorRepresentation.class),
        @ApiResponse(code = 401, message = "Unauthorized  List of supported error codes: - 40: Missing credentials - 41: Invalid credentials - 42: Expired credentials", response = ErrorRepresentation.class),
        @ApiResponse(code = 403, message = "Forbidden  List of supported error codes: - 50: Access denied - 51: Forbidden requester - 52: Forbidden user - 53: Too many requests", response = ErrorRepresentation.class),
        @ApiResponse(code = 404, message = "Not Found  List of supported error codes: - 60: Resource not found", response = ErrorRepresentation.class),
        @ApiResponse(code = 405, message = "Method Not Allowed  List of supported error codes: - 61: Method not allowed", response = ErrorRepresentation.class),
        @ApiResponse(code = 408, message = "Request Time-out  List of supported error codes: - 63: Request time-out", response = ErrorRepresentation.class),
        @ApiResponse(code = 422, message = "Unprocessable entity  Functional error        - code: 100 message: Missing order item (minimum 1) description: At least one order item must be provided    - code: 101 message: Missing Buyer at order level description: One and only one related partyRole with a \"Buyer\" role should be provided at the product order level.    - code: 114 message: Missing Seller at order level description: One and only one related partyRole with a \"Seller\" role should be provided at the product order level.    - code: 102 message: A relatedParty is at the wrong level description: The partyRole provided is not at the correct level - MEF allows to have \"Buyer\", \"Seller\", \"Billing Contact\", \"Order Contact\", \"Implementation Contact\", \"Technical Contact\" roles at product order level and \"UNI Site Contact\", \"UNI Alt Site Contact\", \"ENNI Site Contact\", \"ENNI Alt Site Contact\" at product order item level.    - code: 103 message: Missing Buyer Order Contact at order level description: One and only one related partyRole with a \"Order Contact\" role should be provided at the product order level. Buyer Order Contact name & Telephone number must be provided.    - code: 104 message: Missing Buyer Implementation Contact at order level description: One and only one related partyRole with a \"Implementation Contact\" role should be provided at the product order level. Implementation Contact name & Telephone number must be provided.    - code: 105 message: Missing Buyer Technical contact at order level description: One and only one related partyRole with a \"Technical Contact\" role should be provided at the product order level. Technical Contact name, Telephone number and email address must be provided.    - code: 106 message: Address information must match place type description: If place type is 'Formatted address' : addrLine1, postCode, country must be there, addrLine2, locality, postCodeExtension, stateOrProvince  could be there, but other address information must not be filled If place type is 'Fielded address' : streetName, streetType, postCode must be there, streetNr, streetNrSuffix, streetNrLast, streetSuffix, locality, postCodeExtension, country, stateOrProvince could be there,but other address information must not be filled    - code: 107 message: postCode extension requires postcode value to be filled description: A postCode extension must not be present without a postcode being present    - code: 108 message: Product id is required for all OrderItem Actions other than INSTALL description: If orderItemAction is not INSTALL, orderItem.product.id is mandatory    - code: 109 message: Order Activity must match all OrderItem Actions for INSTALL description: If orderActivity is set to INSTALL, all orderItemAction must be INSTALL    - code: 110 message: Referred quote cannot be used for ordering due to its status description: Quote cannot be used in the order if its status is in CANCELLED, UNABLE TO PROVIDE, REJECTED or EXPIRED state.    - code: 111 message: Billing Account information must not be both at order level and order item level description: Billing Account must not be present both at order header level and order item level.    - code: 112 message: PricingMethod, pricing Reference & pricing term attributes  must not be both at order level and order item level description: Pricing data  must not be present both at order header level and order item level.    - code: 113 message: Referred Serviceability request is expired description: Serviceability information are expired.    - code: 114 message: A reccuring price is mentionned without a charge period. description:     - code: 115 message: Referred Quote is not existing description:     - code: 116 message: Referred ProductOfferingQualification is not existing description:     - code: 117 message: Product /item relationship is missing description:     - code: 118 message: Product Id refered in a relationship is not existing description: ", response = ErrorRepresentation.class),
        @ApiResponse(code = 500, message = "Internal Server Error  List of supported error codes: - 1: Internal error", response = ErrorRepresentation.class),
        @ApiResponse(code = 503, message = "Service Unavailable  ", response = ErrorRepresentation.class) })
    @RequestMapping(value = "/productOrder",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<ProductOrder> productOrderCreate(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ProductOrderCreate productOrder);


    @ApiOperation(value = "Find a list of product order(s)", nickname = "productOrderFind", notes = "This operation is used to retrieve one or more product orders based upon filter criteria specified on input.", response = ProductOrderSummary.class, responseContainer = "List", tags={ "ProductOrder", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ProductOrderSummary.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request  List of supported error codes: - 20: Invalid URL parameter value - 21: Missing body - 22: Invalid body - 23: Missing body field - 24: Invalid body field - 25: Missing header - 26: Invalid header value - 27: Missing query-string parameter - 28: Invalid query-string parameter value", response = ErrorRepresentation.class),
        @ApiResponse(code = 401, message = "Unauthorized  List of supported error codes: - 40: Missing credentials - 41: Invalid credentials - 42: Expired credentials", response = ErrorRepresentation.class),
        @ApiResponse(code = 403, message = "Forbidden  List of supported error codes: - 50: Access denied - 51: Forbidden requester - 52: Forbidden user - 53: Too many requests", response = ErrorRepresentation.class),
        @ApiResponse(code = 404, message = "Not Found  List of supported error codes: - 60: Resource not found", response = ErrorRepresentation.class),
        @ApiResponse(code = 405, message = "Method Not Allowed  List of supported error codes: - 61: Method not allowed", response = ErrorRepresentation.class),
        @ApiResponse(code = 408, message = "Request Time-out  List of supported error codes: - 63: Request time-out", response = ErrorRepresentation.class),
        @ApiResponse(code = 422, message = "Unprocessable entity  Functional error        - code: 100 message: Too many records retrieved - please restrict requested parameter value(s) description: ", response = ErrorRepresentation.class),
        @ApiResponse(code = 500, message = "Internal Server Error  List of supported error codes: - 1: Internal error", response = ErrorRepresentation.class),
        @ApiResponse(code = 503, message = "Service Unavailable  ", response = ErrorRepresentation.class) })
    @RequestMapping(value = "/productOrder",
        produces = { "application/json;charset=utf-8" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ProductOrderSummary>> productOrderFind(@ApiParam(value = "A Party Role played by an Individual or an Organization that buys products and services from a Seller. Specifically, the ID of the Service Provider (Buyer) organization placing the order.") @Valid @RequestParam(value = "buyerId", required = false) String buyerId,@ApiParam(value = "A Party Role played by an organization that provides products and services to a Buyer. Specifically, the ID of the Partner/Access Provider (Seller) organization receiving the order.") @Valid @RequestParam(value = "sellerId", required = false) String sellerId,@ApiParam(value = "The status of the order") @Valid @RequestParam(value = "state", required = false) String state,@ApiParam(value = "Buyer requested date greater than") @Valid @RequestParam(value = "buyerRequestedDate.gt", required = false) OffsetDateTime buyerRequestedDateGt,@ApiParam(value = "Buyer requested date lesser than") @Valid @RequestParam(value = "buyerRequestedDate.lt", required = false) OffsetDateTime buyerRequestedDateLt,@ApiParam(value = "Date when the order was created greater than") @Valid @RequestParam(value = "orderDate.gt", required = false) OffsetDateTime orderDateGt,@ApiParam(value = "Date when the order was created lesser than") @Valid @RequestParam(value = "orderDate.lt", required = false) OffsetDateTime orderDateLt,@ApiParam(value = "Buyer requested start date greater than") @Valid @RequestParam(value = "requestedStartDate.gt", required = false) OffsetDateTime requestedStartDateGt,@ApiParam(value = "Buyer requested start date lesser than") @Valid @RequestParam(value = "requestedStartDate.lt", required = false) OffsetDateTime requestedStartDateLt,@ApiParam(value = "Identifies the Buyer's desired due date (requested delivery date) greater than") @Valid @RequestParam(value = "requestedCompletionDate.gt", required = false) OffsetDateTime requestedCompletionDateGt,@ApiParam(value = "Identifies the Buyer's desired due date (requested delivery date) lesser than") @Valid @RequestParam(value = "requestedCompletionDate.lt", required = false) OffsetDateTime requestedCompletionDateLt,@ApiParam(value = "Seller planned completion date greater than") @Valid @RequestParam(value = "expectedCompletionDate.gt", required = false) OffsetDateTime expectedCompletionDateGt,@ApiParam(value = "Seller planned completion date lesser than") @Valid @RequestParam(value = "expectedCompletionDate.lt", required = false) OffsetDateTime expectedCompletionDateLt,@ApiParam(value = "Effective completion date greater than") @Valid @RequestParam(value = "completionDate.gt", required = false) OffsetDateTime completionDateGt,@ApiParam(value = "Effective completion date lesser than") @Valid @RequestParam(value = "completionDate.lt", required = false) OffsetDateTime completionDateLt,@ApiParam(value = "order cancellation date greater than") @Valid @RequestParam(value = "orderCancellationDate.gt", required = false) OffsetDateTime orderCancellationDateGt,@ApiParam(value = "order cancellation date lesser than") @Valid @RequestParam(value = "orderCancellationDate.lt", required = false) OffsetDateTime orderCancellationDateLt,@ApiParam(value = "A name by which the site is known.") @Valid @RequestParam(value = "siteName", required = false) String siteName,@ApiParam(value = "The name of the company that is located at the service location.  This may be different from the name of the Buyer that ordered services at that site.") @Valid @RequestParam(value = "siteCompanyName", required = false) String siteCompanyName,@ApiParam(value = "The customer name at a site where the service is being delivered") @Valid @RequestParam(value = "siteCustomerName", required = false) String siteCustomerName,@ApiParam(value = "An identifier that is used to group Orders that represent a unit of functionality that is important to a Buyer.") @Valid @RequestParam(value = "projectId", required = false) String projectId,@ApiParam(value = "A number that uniquely identifies an order within the Buyer's enterprise.") @Valid @RequestParam(value = "externalId", required = false) String externalId,@ApiParam(value = "Requested index for start of resources to be provided in response requested by client") @Valid @RequestParam(value = "offset", required = false) String offset,@ApiParam(value = "Requested number of resources to be provided in response requested by client") @Valid @RequestParam(value = "limit", required = false) String limit);


    @ApiOperation(value = "Get a product order (by id)", nickname = "productOrderGet", notes = "This operation is used to retrieve a single product order based upon a specified product order id.", response = ProductOrder.class, tags={ "ProductOrder", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = ProductOrder.class),
        @ApiResponse(code = 400, message = "Bad Request  List of supported error codes: - 20: Invalid URL parameter value - 21: Missing body - 22: Invalid body - 23: Missing body field - 24: Invalid body field - 25: Missing header - 26: Invalid header value - 27: Missing query-string parameter - 28: Invalid query-string parameter value", response = ErrorRepresentation.class),
        @ApiResponse(code = 401, message = "Unauthorized  List of supported error codes: - 40: Missing credentials - 41: Invalid credentials - 42: Expired credentials", response = ErrorRepresentation.class),
        @ApiResponse(code = 403, message = "Forbidden  List of supported error codes: - 50: Access denied - 51: Forbidden requester - 52: Forbidden user - 53: Too many requests", response = ErrorRepresentation.class),
        @ApiResponse(code = 404, message = "Not Found  List of supported error codes: - 60: Resource not found", response = ErrorRepresentation.class),
        @ApiResponse(code = 405, message = "Method Not Allowed  List of supported error codes: - 61: Method not allowed", response = ErrorRepresentation.class),
        @ApiResponse(code = 408, message = "Request Time-out  List of supported error codes: - 63: Request time-out", response = ErrorRepresentation.class),
        @ApiResponse(code = 422, message = "Unprocessable entity  Functional error", response = ErrorRepresentation.class),
        @ApiResponse(code = 500, message = "Internal Server Error  List of supported error codes: - 1: Internal error", response = ErrorRepresentation.class),
        @ApiResponse(code = 503, message = "Service Unavailable  ", response = ErrorRepresentation.class) })
    @RequestMapping(value = "/productOrder/{ProductOrderId}",
        produces = { "application/json;charset=utf-8" }, 
        method = RequestMethod.GET)
    ResponseEntity<ProductOrder> productOrderGet(@ApiParam(value = "",required=true) @PathVariable("ProductOrderId") String productOrderId);

}
